@import "../abstracts/variables";

@mixin transition {
  transition: 0.2s all ease-in-out;
}

@mixin transition-fast {
  transition: 0.15s all linear;
}

@mixin gradient($angle, $startColor, $endColor, $startPercentage: 0, $endPercentage: 100) {
  background-image: -webkit-linear-gradient($angle, $startColor $startPercentage, $endColor $endPercentage);
  background-image: -moz-linear-gradient($angle, $startColor $startPercentage, $endColor $endPercentage);
  background-image: -o-linear-gradient($angle, $startColor $startPercentage, $endColor $endPercentage);
  background-image: linear-gradient($angle, $startColor $startPercentage, $endColor $endPercentage);
}

@mixin outline-hover($props) {
  // Set default values in case the properties are not provided
  $outlineOffset: if(map-has-key($props, 'outlineOffset') and type-of(map-get($props, 'outlineOffset')) == 'number', map-get($props, 'outlineOffset'), 0);
  $outlineWidth: if(map-has-key($props, 'outlineWidth') and type-of(map-get($props, 'outlineWidth')) == 'number', map-get($props, 'outlineWidth'), 0);
  $active: if(map-has-key($props, 'active'), map-get($props, 'active'), true);
  $outlineColor: if(map-has-key($props, 'outlineColor'), map-get($props, 'outlineColor'), #000); // Default outline color

  &:hover, &:focus, &:active {
    box-shadow: 0 0 0 ($border-outline-offset + $outlineOffset) $outlineColor,
                0 0 0 ($border-outline-offset + $outlineOffset +
                        $border-outline-width + $outlineWidth) $outlineColor;
  }

  @if not $active {
    &:active {
      box-shadow: none;
    }
  }
}
