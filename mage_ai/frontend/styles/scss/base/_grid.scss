// components/Grid/index.style.tsx -> base/grid.scss
@import '../../abstracts/colors';
@import '../../base/borders';

@function is-numeric($str) {
  @if type-of($str) == 'number' {
    @return true;
  }
  @return not not index('0' '1' '2' '3' '4' '5' '6' '7' '8' '9', str-slice($str + "", 1, 1));
}

@function range($number-of-items) {
  @if is-numeric($number-of-items) and $number-of-items >= 1 {
    $range: ();
    @for $i from 1 through $number-of-items {
      $range: append($range, 0);
    }
    @return $range;
  }
  @return ();
}

@mixin shared {
  display: grid;
  min-height: 0;
  min-width: 0;

  @if $overflow-visible {
    overflow: visible;
  } @else {
    overflow: hidden;
  }

  @if $section {
    @include base;
  }

  @if not $section {
    padding: if($pad, map-get($grid-gutter-width, if($compact, sm, base)) + px, 0);
  }

  @include build-grid-template-columns;
  @include build-row-column-styles;

  .grid-cell {
    display: grid;
    min-height: 0;
    min-width: 0;
  }

  @if $height {
    height: $height;
  }

  @if $width {
    width: $width;
  }

  @if $row {
    grid-row: $row;
  }
}

@mixin build-grid-template-columns {
  @each $i in range(12) {
    .grid-template-columns-#{$i + 1} {
      grid-template-columns: repeat($i + 1, minmax(0px, 1fr));
    }
  }
}

@mixin build-row-column-styles {
  @each $i in range(12) {
    .grid-row-#{$i} {
      grid-row: $i + 1;
    }
    .grid-row-start-#{$i} {
      grid-row-start: $i + 1;
    }
    .grid-row-end-#{$i} {
      grid-row-end: $i + 1;
    }
  }

  @each $i in range(12) {
    .grid-col-#{$i} {
      grid-column: $i + 1;
    }
    .grid-col-start-#{$i} {
      grid-column-start: $i + 1;
    }
    .grid-col-end-#{$i} {
      grid-column-end: $i + 1;
    }
  }
}

@mixin grid {
  @include shared;

  @if $auto-columns {
    grid-auto-columns: $auto-columns;
  }

  @if $auto-rows {
    grid-auto-rows: $auto-rows;
  }

  @if $auto-flow {
    grid-auto-flow: $auto-flow;
  }

  @if $template-columns {
    grid-template-columns: $template-columns;
  }

  grid-template-rows: if($template-rows, $template-rows, inherit);

  @if $align-items {
    align-items: $align-items;
  }

  @if $align-content {
    align-content: $align-content;
  }

  @if $justify-items {
    justify-items: $justify-items;
  }

  @if $justify-content {
    justify-content: $justify-content;
  }

  column-gap: if($column-gap, $column-gap, map-get($grid-gutter-width, if($compact, sm, base))) + px;
  row-gap: if($row-gap, $row-gap, map-get($grid-gutter-width, if($compact, sm, base))) + px;
}

@mixin grid-uuid {
  &.#{$uuid} {
    @include grid;
  }
}

.grid {
  @if $uuid {
    @include grid-uuid;
  } @else {
    @include grid;
  }
}
